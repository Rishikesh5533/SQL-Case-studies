USE CASESTUDY;

SELECT * FROM FACT
SELECT * FROM LOCATIONS
SELECT * FROM PRODUCT

--1) HOW MANY STATES ARE THERE WHERE PRODUCTS HAVE BEEN SOLD ?

 SELECT COUNT(DISTINCT(STATE)) AS COUNT_STATE FROM LOCATIONS

 --2) HOW MANY PRODUCTS ARE OF REGULAR TYPE ?

 SELECT COUNT(PRODUCT) AS COUNT_REG_PRODUCT FROM PRODUCT
 WHERE TYPE = 'REGULAR'

 --3) HOW MUCH SPENDING HAS BEEN DONE ON MARKETING OF PRODUCT ID 1

 SELECT * FROM FACT

 SELECT SUM(MARKETING) AS MARKETING_SPENDING FROM FACT
 WHERE PRODUCTID = 1

 --4) WHAT IS THE MINIMUM SALES OF A PRODUCT ?

 SELECT * FROM FACT
 SELECT MIN(SALES) AS MIN_SALES FROM FACT



 --5) DISPLAY MAX COST OF GOOD SOLD(COGS).

 SELECT * FROM FACT

 SELECT MAX(COGS) AS MAX_COGS FROM FACT


 --6) DISPLAY THE DETAILS OF THE PRODUCTID WHERE PRODUCT TYPE IS COFFEE

 SELECT P.PRODUCTID,P.PRODUCT_TYPE, F.* FROM PRODUCT AS P
 JOIN
 FACT AS F
 ON P.PRODUCTID = F.PRODUCTID


 7) DISPLAY THE DETAILS WHERE TOTAL_EXPENSES IS GREATER THAN 40.

 SELECT * FROM FACT
 WHERE TOTAL_EXPENSES > 40
 ORDER BY TOTAL_EXPENSES

 --8) WHAT IS THE AVERAGE SALES IN AREA_CODE 719 ?

 SELECT AVG(SALES) AS AVERAGE_SALES FROM FACT
WHERE AREA_CODE = 719


--9) FIND OUT THE TOTAL PROFIT GENERATED BY COLORADO STATE.

SELECT SUM(F.PROFIT) AS TOTAL_PROFIT FROM FACT AS F
JOIN LOCATIONS AS L
ON F.AREA_CODE = L.AREA_CODE
WHERE L.STATE = 'COLORADO'

--10) DISPLAY THE AVERAGE INVENTORY FOR EACH PRODUCT ID.


SELECT * FROM FACT

SELECT AVG(INVENTORY)AS AVG_INVENTORY, PRODUCTID  FROM FACT
GROUP BY PRODUCTID
ORDER BY PRODUCTID  



--11) DISPLAY STATE IN A SEQUENTIAL ORDER IN A LOCATION TABLE.

SELECT DISTINCT(L.STATE) FROM LOCATIONS AS L
ORDER BY L.STATE

--12) DISPLAY THE AVERAGE BUDGET MARGIN OF THE STORE WHERE AVERAGE BUDGET MARGIN SHOULD BE
--GREATER THAN 100.

SELECT * FROM FACT

SELECT AREA_CODE, AVG(BUDGET_MARGIN) AS AVG_BUDGET  FROM FACT
--WHERE AVG_BUDGET > 100
GROUP BY AREA_CODE
HAVING AVG(BUDGET_MARGIN) > 100
ORDER BY AREA_CODE

--13) WHAT IS THE TOTAL SALES DONE ON DATE 2010-01-01

SELECT SUM(SALES) AS TOTAL_SALES FROM FACT
WHERE DATE = '2010-01-01'


--14) DISPLAY THE AVERAGE TOTAL EXPENSE OF EACH PRODUCT ID ON INDIVIDUAL DATE

SELECT DATE,PRODUCTID, AVG(TOTAL_EXPENSES) AS TOTAL_KHARCHA FROM FACT
GROUP BY DATE, PRODUCTID
ORDER BY DATE, PRODUCTID

--15) DISPLAY THE TABLE WITH THE FOLLOWING ATTRIBUTES SUCH AS
--DATE, PRODUCTID, PRODUCT_TYPE, PRODUCT, SALES, PROFIT, STATE, AREA_CODE

SELECT * FROM FACT
SELECT * FROM LOCATIONS
SELECT * FROM PRODUCT


SELECT F.DATE, F.PRODUCTID, P.PRODUCT_TYPE, P.PRODUCT, F.SALES, F.PROFIT, L.STATE, L.AREA_CODE
FROM FACT AS F
INNER JOIN 
LOCATIONS AS L
ON F.AREA_CODE = L.AREA_CODE
INNER JOIN 
PRODUCT AS P
ON P.PRODUCTID = F.PRODUCTID


--16) DISPLAY THE RANK WITHOUT ANY GAP TO SHOW THE SALES WISE RANK.


SELECT SALES,DENSE_RANK() OVER(ORDER BY SALES DESC) AS DRANK FROM FACT


--17) FIND THE STATE WISE PROFIT AND SALES.

SELECT SUM(F.PROFIT) AS PROFITS, SUM(F.SALES)AS SALES, L.STATE  FROM FACT AS F
INNER JOIN
LOCATIONS AS L
ON F.AREA_CODE = L.AREA_CODE
GROUP BY L.STATE

--18) FIND THE STATE WISE PROFIT AND SALES ALONG WITH THE PRODUCT NAME.


SELECT L.STATE,P.PRODUCT,SUM(F.PROFIT) AS PROFITS, SUM(F.SALES)AS SALES  FROM FACT AS F
INNER JOIN
LOCATIONS AS L
ON F.AREA_CODE = L.AREA_CODE
INNER JOIN
PRODUCT AS P
ON P.PRODUCTID = F.PRODUCTID

GROUP BY L.STATE, P.PRODUCT


----19) IF THERE IS AN INCREASE IN SALES OF 5%. CALCULATE THE INCREASED SALES.

SELECT SALES,(SALES + SALES*0.05) AS INCREASEDSALES
FROM FACT


--20) FIND THE MAXIMUM PROFIT ALONG WITH THE PRODUCT ID AND PRODUCT TYPE.

SELECT F.PRODUCTID,P.PRODUCT_TYPE,MAX(F.PROFIT) AS MAXPROFIT FROM FACT AS F
INNER JOIN
PRODUCT AS P
ON F.PRODUCTID = P.PRODUCTID
GROUP BY F.PRODUCTID,P.PRODUCT_TYPE
ORDER BY MAXPROFIT DESC


--21) CREATE A STORED PROCEDURE TO FETCH THE RESULT ACCORDING TO THE PRODUCT TYPE FROM PRODUCT.

CREATE PROC PROC_PRODUCT @TYPE VARCHAR(20)
AS
SELECT * FROM PRODUCT WHERE PRODUCT_TYPE = @TYPE

EXEC PROC_PRODUCT 'TEA'

--22) WRITE A QUERY BY CREATING A CONDITION IN WHICH IF THE TOTAL EXPENSES IS LESS THAN 60 THEN IT IS A
--PROFIT OR ELSE LOSS.

SELECT PRODUCTID, TOTAL_EXPENSES, IIF(TOTAL_EXPENSES < 60, 'PROFIT', 'LOSS') AS COMMENTS FROM FACT


--23) GIVE THE TOTAL  SALES VALUE WITH THE DATE AND PRODUCTID DETAILS. USE ROLL-UP TO PULL THE
--DATA IN HIERARCHICAL ORDER.

SELECT DATE, PRODUCTID, SUM(SALES) AS TOTAL_SALES FROM FACT
GROUP BY ROLLUP( DATE, PRODUCTID)
ORDER BY DATE, PRODUCTID

--24) APPLY UNION AND INTERSECTION OPERATOR ON THE TABLES WHICH CONSIST OF ATTRIBUTE AREA CODE.

SELECT AREA_CODE FROM FACT
UNION
SELECT AREA_CODE FROM LOCATIONS

SELECT AREA_CODE FROM FACT
INTERSECT
SELECT AREA_CODE FROM LOCATIONS


--25) CREATE A USER-DEFINED FUNCTION FOR THE PRODUCT TABLE TO FETCH A PARTICULAR PRODUCT TYPE BASED
--UPON THE USER’S PREFERENCE.

CREATE FUNCTION PROD_TYPE1 (@TYPE VARCHAR(20))
RETURNS TABLE
AS
RETURN (
SELECT * FROM PRODUCT WHERE PRODUCT_TYPE = @TYPE)


SELECT * FROM PROD_TYPE1 ('COFFEE')


--26) CHANGE THE PRODUCT TYPE FROM COFFEE TO TEA WHERE PRODUCT ID IS 1 AND UNDO IT.

UPDATE PRODUCT SET PRODUCT_TYPE = 'TEA' WHERE PRODUCT_TYPE = 'COFFEE'

--27) DISPLAY THE DATE, PRODUCTID AND SALES WHERE TOTAL EXPENSES ARE BETWEEN 100 TO 20

SELECT DATE, PRODUCTID, SALES FROM FACT
WHERE TOTAL_EXPENSES BETWEEN 20 AND 100
ORDER BY  DATE

--28) DELETE THE RECORDS IN THE PRODUCT TABLE FOR REGULAR TYPE.

BEGIN TRANSACTION

DELETE PRODUCT WHERE TYPE = 'REGULAR'

ROLLBACK TRANSACTION

--29) DISPLAY THE ASCII VALUE OF THE FIFTH CHARACTER FROM THE COLUMN PRODUCT

SELECT PRODUCT, SUBSTRING(PRODUCT,5,1) AS CHARACTERS, ASCII(SUBSTRING(PRODUCT,5,1)) AS ASCII
FROM PRODUCT
