CREATE DATABASE IIT_FEB_
USE IIT_FEB_

CREATE TABLE LOCATION (LOCATION_ID INT PRIMARY KEY, CITY VARCHAR (20))
INSERT INTO LOCATION VALUES (122, 'NEW YORK'),
                            (123, 'DALLAS'),
							(124, 'CHICAGO'),
							(167, 'BOSTON');


CREATE TABLE DEPARTMENT (DEPARTMENT_ID INT PRIMARY KEY, NAME VARCHAR(20), LOCATION_ID INT FOREIGN KEY REFERENCES LOCATION(LOCATION_ID))
INSERT INTO DEPARTMENT VALUES (10, 'ACCOUNTING', 122),
                              (20, 'SALES', 123),
							  (30, 'RESEARCH', 124),
							  (40, 'OPERATIONS', 167);


CREATE TABLE JOB (JOB_ID INT PRIMARY KEY, DESIGNATION VARCHAR(20))
INSERT INTO JOB VALUES (667,'CLERK'),
                       (668,'STAFF'),
					   (669,'ANALYST'),
					   (670,'SALES PERSON'),
					   (671,'MANAGER'),
					   (672,'PRESIDENT');


CREATE TABLE EMPLOYEE (EMPLOYEE_ID INT, LAST_NAME VARCHAR (20),FIRST_NAME VARCHAR (20), MIDDLE_NAME VARCHAR (20),JOB_ID INT FOREIGN KEY REFERENCES 
JOB(JOB_ID),MANAGER_ID INT, HIRE_DATE DATE, SALARY INT, COMM INT, DEPARTMENT_ID INT FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENT_ID))
INSERT INTO EMPLOYEE VALUES (7369,'SMITH','JOHN','Q',667,7902,'17-DEC-84',800,NULL,20),
                            (7499,'ALLEN','KEVIN','J',670,7698,'20-FEB-85',1600,300,30),
							(7505,'DOYLE','JEAN','K',671,7839,'04-APR-85',2850,NULL,30),
							(7506,'DENNIS','LYNN','S',671,7839,'15-MAY-85',2750,NULL,30),
							(7507,'BAKER','LESLIE','D',671,7839,'10-JUN-85',2200,NULL,40),
							(7521,'WARK','CYNTHIA','D',670,7698,'22-FEB-85',1250,500,30);


---SIMPLE QUERIES :

---1. LIST ALL THE EMPLOYEE DETAILS

SELECT * FROM EMPLOYEE

---2. LIST ALL THE DEPARTMENT DETAILS

SELECT * FROM DEPARTMENT

---3. LIST ALL JOB DETAILS

SELECT * FROM JOB

---4. LIST ALL THE LOCATIONS

SELECT * FROM LOCATION

---5. LIST OUT THE FIRSTNAME, LASTNAME, SALARY, COMMISSION FOR ALL EMPLOYEES

SELECT FIRST_NAME, LAST_NAME, SALARY, COMM FROM EMPLOYEE

---6. LIST OUT EMPLOYEEID,LAST NAME, DEPARTMENT ID FOR ALL EMPLOYEES AND ALIAS 
---EMPLOYEEID AS "ID OF THE EMPLOYEE", LAST NAME AS "NAME OF THE EMPLOYEE",DEPARTMENTID AS "DEP_ID"

SELECT EMPLOYEE_ID AS "ID OF EMPLOYEE", LAST_NAME AS "EMPLOYEE NAME", DEPARTMENT_ID AS "DEPARTMENT ID" FROM EMPLOYEE

---7. LIST OUT THE EMPLOYEES ANNUAL SALARY WITH THEIR NAMES ONLY.

SELECT LAST_NAME AS "EMPLOYEE NAME", SALARY*12 AS "ANUAL SALARY" FROM EMPLOYEE

---WHERE CONDITION: 

---1. LIST THE DETAILS ABOUT "SMITH"

SELECT * FROM EMPLOYEE WHERE LAST_NAME='SMITH'

---2. LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 20.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID=20

---3. LIST OUT THE EMPLOYEES WHO ARE EARNING SALARY BETWEEN 3000 AND 4500.

SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 3000 AND 4500

---4. LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 10 OR 20.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID IN(20,30)

---5. FIND OUT THE EMPLOYEES WHO ARE NOT WORKING IN DEPARTMENT 10 OR 30.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID NOT IN(10,30)

---6. LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S'.

SELECT * FROM EMPLOYEE WHERE LAST_NAME LIKE 'S%'

---7. LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S' AND ENDS WITH 'H'.

SELECT * FROM EMPLOYEE WHERE LAST_NAME LIKE 'S%H'

---8. LIST OUT THE EMPLOYEES WHOSE NAME LENGTH IS 4 AND START WITH 'S'.

SELECT * FROM EMPLOYEE WHERE LAST_NAME LIKE 'S____'

---9. LIST OUT EMPLOYEES WHO ARE WORKING IN DEPARRTMENT 10 AND DRAW THE SALARIES MORE THAN 3500.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID=10 AND SALARY >3500

---10. LIST OUT THE EMPLOYEES WHO ARE NOT RECEVING COMMISSION.

SELECT * FROM EMPLOYEE WHERE COMM IS NULL

---ORDER BY CLAUSE:

---1. LIST OUT THE EMPLOYEE ID, LAST NAME IN ASCENDING ORDER BASED ON THE EMPLOYEE ID.

SELECT EMPLOYEE_ID,LAST_NAME FROM EMPLOYEE ORDER BY EMPLOYEE_ID

---2. LIST OUT THE EMPLOYEE ID, NAME IN DESCENDING ORDER BASED ON SALARY.

SELECT EMPLOYEE_ID,LAST_NAME FROM EMPLOYEE ORDER BY SALARY DESC

---3. LIST OUT THE EMPLOYEE DETAILS ACCORDING TO THEIR LAST-NAME IN ASCENDING ORDER 

SELECT * FROM EMPLOYEE ORDER BY LAST_NAME

---4. LIST OUT THE EMPLOYEE DETAILS ACCORDING TO THEIR LAST-NAME IN ASCENDING ORDER AND THEN ON DEPARTMENT_ID IN DESCENDING ORDER.

SELECT * FROM EMPLOYEE ORDER BY LAST_NAME, DEPARTMENT_ID DESC

---GROUP BY & HAVING CLAUSE:

---1. HOW MANY EMPLOYEES WHO ARE IN DIFFERENT DEPARTMENTS WISE IN THE ORGANIZATION.

SELECT DEPARTMENT_ID,COUNT(*) AS "NUMBER OF EMPLOYEE" FROM EMPLOYEE GROUP BY DEPARTMENT_ID

---2. LIST OUT THE DEPARTMENT WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARY OF THE EMPLOYEES.

SELECT DEPARTMENT_ID, MAX(SALARY) MAXUM_SALARY, MIN(SALARY) MINMUM_SALARY, AVG(SALARY) AVERAGE_SALARY FROM EMPLOYEE GROUP BY DEPARTMENT_ID

---3. LIST OUT JOB WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARIES OF THE EMPLOYEES.

SELECT JOB_ID, MAX(SALARY) MAXUM_SALARY, MIN(SALARY) MINMUM_SALARY, AVG(SALARY) AVERAGE_SALARY FROM EMPLOYEE GROUP BY JOB_ID

---4. LIST OUT THE NUMBER OF EMPLOYEES JOINED IN EVERY MONTH IN ASCENDING ORDER.

SELECT DATENAME(MM,HIRE_DATE) MONTH, COUNT(*) NoOfEmployee FROM EMPLOYEE GROUP BY DATENAME(MM,HIRE_DATE)

---5. LIST OUT THE NUMBER OF EMPLOYEES FOR EACH MONTH AND YEAR, IN THE ASCENDING ORDER BASED ON THE YEAR, MONTH.

SELECT DATEPART(YYYY,HIRE_DATE) YEAR, DATENAME(MM,HIRE_DATE) MONTH, COUNT(*) NoOfEmployee FROM EMPLOYEE GROUP BY DATEPART(YYYY,HIRE_DATE),DATENAME(MM,HIRE_DATE)

---6. LIST OUT THE DEPARTMENT ID HAVING ATLEAST FOUR EMPLOYEES.

SELECT DEPARTMENT_ID,COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE GROUP BY DEPARTMENT_ID HAVING COUNT(*)>4

---7. HOW MANY EMPLOYEES JOINED IN JANUARY MONTH.

SELECT DATENAME(MM,HIRE_DATE) MONTH,COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE WHERE DATENAME(MM,HIRE_DATE)='JANUARY' GROUP BY DATENAME(MM,HIRE_DATE)

---8. HOW MANY EMPLOYEES JOINED IN JANUARY OR SEPTEMBER MONTH.

SELECT DATENAME(MM,HIRE_DATE) MONTH,COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE WHERE DATENAME(MM,HIRE_DATE)IN ('JANUARY','SEPTEMBER')GROUP BY DATENAME(MM,HIRE_DATE)

---9. HOW MANY EMPLOYEES WERE JOINED IN 1985?

SELECT DATEPART(YY,HIRE_DATE) YEAR,COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE WHERE DATEPART(YY,HIRE_DATE)=1985 GROUP BY DATEPART(YY,HIRE_DATE)

---10.HOW MANY EMPLOYEES WERE JOINED EACH MONTH IN 1985.

SELECT DATEPART(YY,HIRE_DATE) YEAR, DATENAME(MM,HIRE_DATE) MONTH, COUNT(*) "NUMBER OF EMPLOYEES"
FROM EMPLOYEE WHERE DATEPART(YY,HIRE_DATE)=1985 GROUP BY DATEPART(YY,HIRE_DATE),DATENAME(MM,HIRE_DATE)

---11. HOW MANY EMPLOYEES WERE JOINED IN MARCH 1985?

SELECT DATEPART(YY,HIRE_DATE) YEAR, DATENAME(MM,HIRE_DATE) MONTH, COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE WHERE DATEPART(YY,HIRE_DATE)=1985 AND
DATENAME(MM,HIRE_DATE)='MARCH' GROUP BY DATEPART(YY,HIRE_DATE),DATENAME(MM,HIRE_DATE)

---12. WHICH IS THE DEPARTMENT ID, HAVING GREATER THAN OR EQUAL TO 3 EMPLOYEES JOINED IN APRIL 1985?

SELECT DEPARTMENT_ID, COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE WHERE DATEPART(YY,HIRE_DATE)=1985 
AND DATENAME(MM,HIRE_DATE)='APRIL' GROUP BY DEPARTMENT_ID HAVING COUNT(*)>=3

---JOINS:

---1. LIST OUT EMPLOYEES WITH THEIR DEPARTMENT NAMES.

SELECT EMPLOYEE_ID,LAST_NAME,SALARY,E.DEPARTMENT_ID,NAME FROM EMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID

---2. DISPLAY EMPLOYEES WITH THEIR DESIGNATIONS.

SELECT EMPLOYEE_ID,LAST_NAME,SALARY,E.DEPARTMENT_ID FROM EMPLOYEE E INNER JOIN JOB J ON E.JOB_ID=J.JOB_ID

---3. DISPLAY THE EMPLOYEES WITH THEIR DEPARTMENT NAMES AND REGIONAL GROUPS.

SELECT EMPLOYEE_ID, LAST_NAME,SALARY, E.DEPARTMENT_ID, NAME,CITY FROM EMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID INNER JOIN LOCATION L ON D.LOCATION_ID=L.LOCATION_ID

---4. HOW MANY EMPLOYEES WHO ARE WORKING IN DIFFERENT DEPARTMENTS AND DISPLAY WITH DEPARTMENT NAMES.

SELECT NAME AS "DEPARTMENT NAME",COUNT(*) AS "NUMBER OF EMPLOYEES" FROM DEPARTMENT D INNER JOIN EMPLOYEE E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID GROUP BY NAME

---5. HOW MANY EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT.

SELECT NAME,COUNT(*) AS "NUMBER OF EMPLOYEES" FROM DEPARTMENT D INNER JOIN EMPLOYEE E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID GROUP BY NAME HAVING NAME='SALES'

---6. WHICH IS THE DEPARTMENT HAVING GREATER THAN OR EQUAL TO 5 EMPLOYEES AND DISPLAY THE DEPARTMENT NAMES IN ASCENDING ORDER.

SELECT NAME AS "DEPARTMENT NAME",COUNT(*) AS "NUMBER OF EMPLOYEES" FROM DEPARTMENT D INNER JOIN EMPLOYEE E ON E.DEPARTMENT_ID=D.DEPARTMENT_ID GROUP BY NAME HAVING COUNT(*)>=5

---7. HOW MANY JOBS IN THE ORGANIZATION WITH DESIGNATIONS.

SELECT DESIGNATION,COUNT(*) AS "NO OF JOBS" FROM JOB J INNER JOIN EMPLOYEE E ON E.JOB_ID=J.JOB_ID GROUP BY DESIGNATION

---8. HOW MANY EMPLOYEES ARE WORKING IN "NEW YORK".

SELECT CITY, COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID INNER JOIN LOCATION L ON D.LOCATION_ID=L.LOCATION_ID GROUP BY CITY HAVING CITY='NEW YORK'

---9. DISPLAY THE EMPLOYEE DETAILS WITH SALARY GRADES.
---10. LIST OUT THE NO. OF EMPLOYEES ON GRADE WISE.
---11. DISPLAY THE EMPLOYEE SALARY GRADES AND NO. OF EMPLOYEES BETWEEN 2000 TO 5000 RANGE OF SALARY.

---12. DISPLAY THE EMPLOYEE DETAILS WITH THEIR MANAGER NAMES.

SELECT E.EMPLOYEE_ID "EMPLOYEE ID", E.LAST_NAME "EMPLOYEE NAME", M.LAST_NAME "MANAGER NAME" FROM EMPLOYEE E,EMPLOYEE M WHERE M.EMPLOYEE_ID=E.MANAGER_ID

---13. DISPLAY THE EMPLOYEE DETAILS WHO EARN MORE THAN THEIR MANAGERS SALARIES.

SELECT E.LAST_NAME "EMPLOYEE NAME", E.SALARY "EMPLOYEE SALARY", M.LAST_NAME "MANAGER NAME", M.SALARY "MANAGER SALARY" FROM EMPLOYEE E,EMPLOYEE M WHERE M.EMPLOYEE_ID=E.MANAGER_ID AND E.SALARY>M.SALARY

---14. SHOW THE NO. OF EMPLOYEES WORKING UNDER EVERY MANAGER.

SELECT M.LAST_NAME,COUNT(*) "NUMBER OF EMPLOYEES" FROM EMPLOYEE E,EMPLOYEE M WHERE E.MANAGER_ID=M.EMPLOYEE_ID GROUP BY M.LAST_NAME

---15. DISPLAY EMPLOYEE DETAILS WITH THEIR MANAGER NAMES.

SELECT EMPLOYEE_ID,LAST_NAME,HIRE_DATE,SALARY,E.DEPARTMENT_ID,NAME FROM EMPLOYEE E LEFT OUTER JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID

---16. DISPLAY ALL EMPLOYEES IN SALES OR OPERATION DEPARTMENTS.

SELECT EMPLOYEE_ID,LAST_NAME,E.DEPARTMENT_ID,NAME FROM EMPLOYEE E LEFT OUTER JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID AND D.DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME IN('SALES','OPERATIONS'))

---SET OPERATORS:

---1. LIST OUT THE DISTINCT JOBS IN SALES AND ACCOUNTING DEPARTMENTS.

SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='SALES'))
UNION SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING'))

---2. LIST OUT ALL THE JOBS IN SALES AND ACCOUNTING DEPARTMENTS.

SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='SALES'))
UNION ALL SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING'))

---3. LIST OUT THE COMMON JOBS IN RESEARCH AND ACCOUNTING DEPARTMENTS IN ASCENDING ORDER.

SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='RESEARCH'))
INTERSECT SELECT DESIGNATION FROM JOB WHERE JOB_ID IN(SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID=(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING'))

---SUB QUERIES:

---1. DISPLAY THE EMPLOYEES LIST WHO GOT THE MAXIMUM SALARY.

SELECT * FROM EMPLOYEE WHERE SALARY IN (SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALARY=(SELECT MAX(SALARY) FROM EMPLOYEE))

---2. DISPLAY THE EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='SALES')

---3. DISPLAY THE EMPLOYEES WHO ARE WORKING AS 'CLERCK'.

SELECT * FROM EMPLOYEE WHERE JOB_ID IN (SELECT JOB_ID FROM JOB WHERE DESIGNATION='CLERK')

---4. DISPLAY THE LIST OF EMPLOYEES WHO ARE LIVING IN "NEW YORK".

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE LOCATION_ID IN (SELECT LOCATION_ID FROM LOCATION WHERE CITY='NEW YORK'))

---5. FIND OUT NO. OF EMPLOYEES WORKING IN "SALES" DEPARTMENT.

SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='SALES')

---6. UPDATE THE EMPLOYEES SALARIES, WHO ARE WORKING AS CLERK ON THE BASIS OF 10%.

UPDATE EMPLOYEE SET SALARY=(SALARY+SALARY*10/100) WHERE JOB_ID IN(SELECT JOB_ID FROM JOB WHERE DESIGNATION='CLERK')

---7. DELETE THE EMPLOYEES WHO ARE WORKING IN ACCOUNTING DEPARTMENT.

DELETE FROM EMPLOYEE WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING')

---8. DISPLAY THE SECOND HIGHEST SALARY DRAWING EMPLOYEE DETAILS.

SELECT * FROM EMPLOYEE WHERE SALARY IN(SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALARY <(SELECT MAX(SALARY) FROM EMPLOYEE))

---9. DISPLAY THE N'TH HIGHEST SALARY DRAWING EMPLOYEE DETAILS.

SELECT A.SALARY FROM EMPLOYEE A WHERE N-1=(SELECT COUNT(DISTINCT(B.SALARY)) FROM EMPLOYEE B WHERE A.SALARY<B.SALARY )
2ND,3RD AND 5TH MAX SALARYS
SELECT A.SALARY FROM EMPLOYEE A WHERE (SELECT COUNT(DISTINCT(B.SALARY)) FROM EMPLOYEE B WHERE A.SALARY<B.SALARY)IN(1,2,4)

---10. LIST OUT THE EMPLOYEES WHO EARN MORE THAN EVERY EMPLOYEE IN DEPARTMENT 30.

SELECT * FROM EMPLOYEE WHERE SALARY>ALL(SELECT SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID=30)

---11. LIST OUT THE EMPLOYEES WHO EARN MORE THAN THE LOWEST SALARY IN DEPARTMENT 30.

SELECT * FROM EMPLOYEE WHERE SALARY>ANY(SELECT MIN(SALARY) FROM EMPLOYEE WHERE DEPARTMENT_ID=30)

---12. FIND OUT WHOSE DEPARTMENT HAS NOT EMPLOYEES.

SELECT DEPARTMENT_ID,NAME FROM DEPARTMENT WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM EMPLOYEE)

---13. FIND OUT WHICH DEPARTMENT DOES NOT HAVE ANY EMPLOYEES.

SELECT DEPARTMENT_ID,NAME FROM DEPARTMENT WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM EMPLOYEE)

---14. FIND OUT THE EMPLOYEES WHO EARN GREATER THAN THE AVERAGE SALARY FOR THEIR DEPARTMENT

SELECT * FROM EMPLOYEE E WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE WHERE DEPARTMENT_ID=E.DEPARTMENT_ID GROUP BY DEPARTMENT_ID)